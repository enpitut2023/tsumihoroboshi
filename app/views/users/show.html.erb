<div class="container mt-5">
    <div class="row">
        <div class="col-md-4">
            <div class="user-experience card">
                <div class="card-body">
                    <div class="row justify-content-center"> <!-- 横方向に中央寄せ -->
                        <div class="col-6 text-center"> <!-- カラムの幅を指定して中央寄せ -->
                            <% if @user.image.attached? %>
                                <%= image_tag @user.image, format: "jpeg", fallback: "no_image.jpg", class: "nav-image ", size: "150x150" %>
                            <% end %>
                            <div class="card-text mt-4">ユーザー名: <%= @user.name %></div>
                            <% if current_user.present? and current_user == @user %>
                                <div class="card-text"><%= link_to "ユーザー編集", edit_user_path(current_user.id) %></div>
                            <% else %>
                                <% if current_user.following?(@user) %>
                                    <%= link_to "フォロー外す", user_relationships_path(@user.id), method: :delete %>
                                <% else %>
                                    <%= link_to "フォローする", user_relationships_path(@user.id), method: :post %>
                                <% end %>
                            <% end %>
                            <div class="card-text">現在の経験値: <%= @user.exp %></div>
                            <div class="card-text">現在のレベル: <%= @user.current_level %></div>
                            <div class="level-bar mt-2">
                                <div class="level-progress" style="width: <%= level_progress_percentage(@user) %>%"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card mt-3">
                <div class="card-body">
                    <div class="card-text">フォロー数: <%= @user.followings.count %></div>
                    <div class="card-text">フォロワー数: <%= @user.followers.count %></div>
                    <div class="card-text"><%= link_to "フォロー一覧", followings_user_path(@user) %></div>
                    <div class="card-text"><%= link_to "フォロワー一覧", followers_user_path(@user) %></div>
                    <div class="card-text"><%= link_to "フォローフォロワー一覧", follows_user_path(@user) %></div>
                    <div class="card-text"><%= link_to "お気に入り", likes_path() %></div>
                    <div class="search_form mt-4">
                        <%= form_with url: user_searches_path(user_id: @user.id), local: true, method: :get do |f| %>
                            <%= f.text_field :word %>
                            <%= f.select :range, options_for_select([['User'], ['Book']]) %>
                            <%= f.submit "検索", class: "btn btn-primary" %>
                        <% end %>
                    </div>
                    <!--ここからストップウォッチ-->
                    <% if current_user.present? and current_user == @user %> 
                        <input type="hidden" id="user-id" value="<%= @user.id %>">
                        <h2>Stopwatch</h2>
                        <div id="time">00:00:00.000</div>
                        <div id="buttons">
                            <input id="start" type="button" value="start">
                            <input id="pause" type="button" value="pause" disabled=true>
                            <input id="stop" type="button" value="stop" disabled=true>
                            <input id="reset" type="button" value="reset" disabled=true>
                        </div>

                        <script>
                            document.addEventListener('DOMContentLoaded', () => {
                            const time = document.getElementById('time');
                            const startButton = document.getElementById('start');
                            const pauseButton = document.getElementById('pause');
                            const stopButton = document.getElementById('stop');
                            const resetButton = document.getElementById('reset');

                            // 開始時間
                            let startTime;
                            // 停止時間
                            let stopTime = 0;
                            // タイムアウトID
                            let timeoutID;

                            let isPause = true;

                            function displayTime() {
                                const currentTime = new Date(Date.now() - startTime + stopTime);
                                const h = String(currentTime.getHours()-9).padStart(2, '0');
                                const m = String(currentTime.getMinutes()).padStart(2, '0');
                                const s = String(currentTime.getSeconds()).padStart(2, '0');
                                const ms = String(currentTime.getMilliseconds()).padStart(3, '0');
                                const st = String(new Date(startTime));
                                const nt = String(new Date(Date.now()));
                                const pt = String(new Date(stopTime));
                                

                                time.textContent = `${h}:${m}:${s}.${ms}`;
                                timeoutID = setTimeout(displayTime, 10);
                            }

                            startButton.addEventListener('click', () => {
                                const userId = document.getElementById('user-id').value;
                                const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

                                fetch(`/users/${userId}/timers/start`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-CSRF-Token': csrfToken
                                }
                                })
                                .then((response) => response.json())
                                .then((data) => {
                                    const { id } = data;
                                    timerId = id;

                                    startButton.disabled = true;
                                    pauseButton.disabled = false;
                                    stopButton.disabled = true;
                                    resetButton.disabled = true;
                                    startTime = Date.now();
                                    displayTime();
                                })
                                .catch((error) => console.error('Error:', error));
                            });

                            pauseButton.addEventListener('click', function() {
                                if(isPause) {
                                    isPause = false;
                                    startButton.disabled = true;
                                    pauseButton.disabled = false;
                                    stopButton.disabled = false;
                                    resetButton.disabled = false;
                                    clearTimeout(timeoutID);
                                    stopTime += (Date.now() - startTime);
                                }else {
                                    isPause = true;
                                    startButton.disabled = true;
                                    pauseButton.disabled = false;
                                    stopButton.disabled = false;
                                    resetButton.disabled = true;
                                    startTime = Date.now();
                                    displayTime();
                                }
                                

                            });

                            stopButton.addEventListener('click', function() {
                                const userId = document.getElementById('user-id').value;
                                const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
                                const inputData = {
                                duration: stopTime
                                };

                                fetch(`/users/${userId}/timers/${timerId}/stop`, {
                                method: 'PATCH',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-CSRF-Token': csrfToken
                                }, 
                                body: JSON.stringify(inputData)
                                })
                                .then((response) => response.json())
                                .then(() => {
                                    isPause = true;
                                    startButton.disabled = false;
                                    pauseButton.disabled = true;
                                    stopButton.disabled = true;
                                    resetButton.disabled = true;
                                    time.textContent = '00:00:00.000';
                                    stopTime = 0;
                                })
                                .catch((error) => console.error('Error:', error));
                            });

                            resetButton.addEventListener('click', function() {
                                const userId = document.getElementById('user-id').value;
                                const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

                                fetch(`/users/${userId}/timers/${timerId}`, {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-CSRF-Token': csrfToken
                                }
                                })
                                .then((response) => response.json())
                                .then((data) => {
                                    isPause = true;
                                    startButton.disabled = false;
                                    stopButton.disabled = true;
                                    resetButton.disabled = true;
                                    time.textContent = '00:00:00.000';
                                    stopTime = 0;
                                })
                                .catch((error) => console.error('Error:', error));
                            });

                            });
                        </script>
                    <% end %>
                    <!--ここまでストップウォッチ-->
                </div>
            </div>
        </div>

        <div class="col-md-8">
        <h2>これから読む</h2>
        <table class='table table-hover table-inverse'>
            <thead>
                <tr>
                    <th></th>
                    <th>Title</th>
                    <th>Reading_status</th>
                    <th colspan="3"></th>
                </tr>
            </thead>
            <tbody>
                <% @tsundoku_todo.each do |tsundoku| %>
                    <tr>
                        <td>
                            <% if tsundoku.book.image_url.present? %>
                                <%= image_tag tsundoku.book.image_url, format: "jpeg", fallback: "no_image.jpg", size:"50x75" %>
                            <% elsif tsundoku.book.image.attached? %>
                                <%= image_tag tsundoku.book.image, format: "jpeg", fallback: "no_image.jpg", size:"50x75" %>
                            <% end %>
                        </td>
                        <td><%= tsundoku.book.title %></td>
                        <td>
                            <%= form_with model:[tsundoku.book, tsundoku], local:true do |f| %>
                                <%= f.select :reading_status, options_for_select([['これから読む', 0], ['読んでいる', 1], ['読み終わった', 2]], tsundoku.reading_status), {}, class: "form-control" %>
                                <%= f.datetime_field :deadline %>
                                <%= f.submit "Update Status", class: "btn btn-success" %>
                            <% end %>
                        </td>
                        
                        <td>
                            <% if tsundoku.memo.present? %>
                                <%= tsundoku.memo %>
                                <%= link_to "メモの編集", edit_book_tsundoku_path(book_id: tsundoku.book.id, id: tsundoku.id) %>
                            <% else %>
                                <%= link_to "メモの追加", edit_book_tsundoku_path(book_id: tsundoku.book.id, id: tsundoku.id) %>
                            <% end %>
                        </td>
                        <td><%= link_to "詳細", book_path(tsundoku.book.id), method: :get %></td>
                        <td>
                            <% if current_user.present? and tsundoku.user == current_user %>
                                <%= link_to "削除", book_tsundoku_path(book_id: tsundoku.book.id, id: tsundoku.id), method: :delete, data: { confirm: '本当に削除しますか？' } %>
                            <% end %>
                        </td>
                        <td>
                            <% if tsundoku.deadline.present? %>
                                あと<%= (tsundoku.deadline - Time.zone.now).to_i / 1.day %>日
                            <% end %>
                        </td>
                    </tr>
                <% end %>
            </tbody>
        </table>

        <h2>読んでいる</h2>
        <table class='table table-hover table-inverse'>
            <thead>
                <tr>
                    <th></th>
                    <th>Title</th>
                    <th>Reading_status</th>
                    <th colspan="3"></th>
                </tr>
            </thead>
            <tbody>
                <% @tsundoku_doing.each do |tsundoku| %>
                    <tr>
                        <td>
                            <% if tsundoku.book.image_url.present? %>
                                <%= image_tag tsundoku.book.image_url, format: "jpeg", fallback: "no_image.jpg", size:"50x75" %>
                            <% elsif tsundoku.book.image.attached? %>
                                <%= image_tag tsundoku.book.image, format: "jpeg", fallback: "no_image.jpg", size:"50x75" %>
                            <% end %>
                        </td>
                        <td><%= tsundoku.book.title %></td>
                        <td>
                            <%= form_with model:[tsundoku.book, tsundoku], local:true do |f| %>
                                <%= f.select :reading_status, options_for_select([['これから読む', 0], ['読んでいる', 1], ['読み終わった', 2]], tsundoku.reading_status), {}, class: "form-control" %>
                                <%= f.datetime_field :deadline %>
                                <%= f.submit "Update Status", class: "btn btn-success" %>
                            <% end %>
                        </td>
                        <td>
                            <% if tsundoku.memo.present? %>
                                <%= tsundoku.memo %>
                                <%= link_to "メモの編集", edit_book_tsundoku_path(book_id: tsundoku.book.id, id: tsundoku.id) %>
                            <% else %>
                                <%= link_to "メモの追加", edit_book_tsundoku_path(book_id: tsundoku.book.id, id: tsundoku.id) %>
                            <% end %>
                        </td>
                        <td><%= link_to "詳細", book_path(tsundoku.book.id), method: :get %></td>
                        <td>
                            <% if current_user.present? and tsundoku.user == current_user %>
                                <%= link_to "削除", book_tsundoku_path(book_id: tsundoku.book.id, id: tsundoku.id), method: :delete, data: { confirm: '本当に削除しますか？' } %>
                            <% end %>
                        </td>
                        <td>
                            <% if tsundoku.deadline.present? %>
                                あと<%= (tsundoku.deadline - Time.zone.now).to_i / 1.day %>日
                            <% end %>
                        </td>
                    </tr>
                <% end %>
            </tbody>
        </table>

        <h2>読み終わった</h2>
        <table class='table table-hover table-inverse'>
            <thead>
                <tr>
                    <th></th>
                    <th>Title</th>
                    <th>Reading_status</th>
                    <th colspan="3"></th>
                </tr>
            </thead>
            <tbody>
                <% @tsundoku_done.each do |tsundoku| %>
                    <tr>
                        <td>
                            <% if tsundoku.book.image_url.present? %>
                                <%= image_tag tsundoku.book.image_url, format: "jpeg", fallback: "no_image.jpg", size:"50x75" %>
                            <% elsif tsundoku.book.image.attached? %>
                                <%= image_tag tsundoku.book.image, format: "jpeg", fallback: "no_image.jpg", size:"50x75" %>
                            <% end %>
                        </td>
                        <td><%= tsundoku.book.title %></td>
                        <td>
                            <%= form_with model:[tsundoku.book, tsundoku], local:true do |f| %>
                                <%= f.select :reading_status, options_for_select([['これから読む', 0], ['読んでいる', 1], ['読み終わった', 2]], tsundoku.reading_status), {}, class: "form-control" %>
                                <%= f.datetime_field :deadline %>
                                <%= f.submit "Update Status", class: "btn btn-success" %>
                            <% end %>
                        </td>
                        <td>
                            <% if tsundoku.memo.present? %>
                                <%= tsundoku.memo %>
                                <%= link_to "メモの編集", edit_book_tsundoku_path(book_id: tsundoku.book.id, id: tsundoku.id) %>
                            <% else %>
                                <%= link_to "メモの追加", edit_book_tsundoku_path(book_id: tsundoku.book.id, id: tsundoku.id) %>
                            <% end %>
                        </td>
                        <td><%= link_to "詳細", book_path(tsundoku.book.id), method: :get %></td>
                        <td>
                            <% if current_user.present? and tsundoku.user == current_user %>
                                <%= link_to "削除", book_tsundoku_path(book_id: tsundoku.book.id, id: tsundoku.id), method: :delete, data: { confirm: '本当に削除しますか？' } %>
                            <% end %>
                        </td>
                    </tr>
                <% end %>
            </tbody>
            </table>
            <div class="calender mt-4">
                <% for deadlines in @list %>
                <%= month_calendar(attribute: :deadline, events: deadlines[0], start_date: deadlines[1]) do |date,deadlines| %>
                    <%= date.day %>
                    <% deadlines.each do |deadline| %>
                        <div>
                            <%= deadline.book.title %>
                        </div>

                    <% end %>
                <% end %>
                <% end %>
            </div>
        </div>
    </div>
</div>















